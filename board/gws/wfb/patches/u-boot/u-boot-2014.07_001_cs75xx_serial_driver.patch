From 7b0f317d95c9a10aff1412fa94d2bf7c69a7ab83 Mon Sep 17 00:00:00 2001
From: Hoang Tran <hoang.tran@greenwavereality.com>
Date: Mon, 1 Dec 2014 12:09:09 +0800
Subject: [PATCH 1/8] add cs75xx serial driver

Signed-off-by: Hoang Tran <hoang.tran@greenwavereality.com>
---
 drivers/serial/Makefile    |   1 +
 drivers/serial/serial.c    |   2 +
 drivers/serial/serial_g2.c | 193 +++++++++++++++++++++++++++++++++++++++++++++
 drivers/serial/serial_g2.h |  99 +++++++++++++++++++++++
 4 files changed, 295 insertions(+)
 create mode 100644 drivers/serial/serial_g2.c
 create mode 100644 drivers/serial/serial_g2.h

diff --git a/drivers/serial/Makefile b/drivers/serial/Makefile
index 571c18f..b3f2510 100644
--- a/drivers/serial/Makefile
+++ b/drivers/serial/Makefile
@@ -34,6 +34,7 @@ obj-$(CONFIG_BFIN_SERIAL) += serial_bfin.o
 obj-$(CONFIG_FSL_LPUART) += serial_lpuart.o
 obj-$(CONFIG_MXS_AUART) += mxs_auart.o
 obj-$(CONFIG_ARC_SERIAL) += serial_arc.o
+obj-$(CONFIG_G2_SERIAL) += serial_g2.o
 
 ifndef CONFIG_SPL_BUILD
 obj-$(CONFIG_USB_TTY) += usbtty.o
diff --git a/drivers/serial/serial.c b/drivers/serial/serial.c
index fd61a5e..294d881 100644
--- a/drivers/serial/serial.c
+++ b/drivers/serial/serial.c
@@ -157,6 +157,7 @@ serial_initfunc(sh_serial_initialize);
 serial_initfunc(arm_dcc_initialize);
 serial_initfunc(mxs_auart_initialize);
 serial_initfunc(arc_serial_initialize);
+serial_initfunc(g2_serial_initialize);
 
 /**
  * serial_register() - Register serial driver with serial driver core
@@ -250,6 +251,7 @@ void serial_initialize(void)
 	arm_dcc_initialize();
 	mxs_auart_initialize();
 	arc_serial_initialize();
+	g2_serial_initialize();
 
 	serial_assign(default_serial_console()->name);
 }
diff --git a/drivers/serial/serial_g2.c b/drivers/serial/serial_g2.c
new file mode 100644
index 0000000..4606824
--- /dev/null
+++ b/drivers/serial/serial_g2.c
@@ -0,0 +1,193 @@
+/*
+ *  drivers/serial/serial_g2.c
+ *
+ * Copyright (c) Greenwave Reality Inc 2014.
+ * 		Hoang Tran <hoang.tran@greenwavereality.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+#include <common.h>
+#include <asm/io.h>
+#include <asm/arch/register.h>
+#include <serial.h>
+#include "serial_g2.h"
+
+#define IO_WRITE(addr, val) 	(*(volatile unsigned int *)(addr) = (val))
+#define IO_READ(addr) 		(*(volatile unsigned int *)(addr))
+
+DECLARE_GLOBAL_DATA_PTR;
+
+/*
+ * Cortina G2 has four UARTs, we use the first two, at 115200-8-N-1
+ */
+#define baudrate		(gd->baudrate) /* CONFIG_BAUDRATE */
+
+#ifdef CONFIG_SYS_SERIAL0
+#undef CONFIG_SYS_SERIAL0
+#endif
+
+#ifdef CONFIG_SYS_SERIAL1
+#undef CONFIG_SYS_SERIAL1
+#endif
+
+#define CONFIG_SYS_SERIAL0	PER_UART0_CFG
+#define CONFIG_SYS_SERIAL1	PER_UART1_CFG
+
+extern void get_platform_clk(unsigned int *cpu_clk, unsigned int *apb_clk, unsigned int *axi_clk);
+
+int g2_serial_init (unsigned int port)
+{
+	unsigned int temp;
+	unsigned int sample = 0;
+	static unsigned int cpu_clk;
+	static unsigned int apb_clk;
+	static unsigned int axi_clk;
+
+	/*
+	 ** First, disable everything.
+	 */
+	IO_WRITE(port + UCFG, 0x0);
+
+	/* get APB clock rate */
+	get_platform_clk(&cpu_clk, &apb_clk, &axi_clk);
+
+	/*
+	 ** Set baud rate, 8 bits, 1 stop bit, no parity
+	 **
+	 */
+
+	/* temp = UART_CLOCK/baudrate; */
+	temp = apb_clk/baudrate;
+	temp = (temp << 8) | UCFG_EN | UCFG_TX_EN | UCFG_RX_EN 	\
+		| UCFG_CHAR_8;
+	IO_WRITE(port + UCFG, temp);
+
+	/* sample = (UART_CLOCK/baudrate)/2; */
+	sample = (apb_clk/baudrate)/2; 
+	sample = (sample < 7) ? 7 : sample;
+	IO_WRITE(port + URX_SAMPLE, sample);
+
+	return 0;
+}
+
+void g2_serial_puts (const char *s)
+{
+	while (*s) {
+		serial_putc (*s++);
+	}
+}
+
+static void g2_serial_putc (unsigned int port, char c)
+{
+	volatile unsigned int status;
+
+	/* Send the character */
+	IO_WRITE(port + UTX_DATA, c);
+
+	/* Wait for Tx FIFO not full */
+	do {
+		status = IO_READ(port + UINFO);
+	} while (!(status & UINFO_TX_FIFO_EMPTY));
+
+}
+
+static int g2_serial_getc (unsigned int port)
+{
+	unsigned int data;
+
+	/* Wait until there is data in the FIFO */
+	while ( IO_READ(port + UINFO) & UINFO_RX_FIFO_EMPTY );
+
+	data = IO_READ(port + URX_DATA) & 0xFF;
+
+	return data;
+}
+
+static int g2_serial_tstc (int port)
+{
+	unsigned int status;
+
+	status = IO_READ(port + UINFO);
+
+	if (status & UINFO_RX_FIFO_EMPTY)	/* empty */
+		return 0;
+	else			/* something in RX FIFO */
+		return 1;
+}
+
+#define g2_uart(uart, UART)				\
+	int g2_##uart##_init(void)			\
+	{						\
+		return g2_serial_init(UART);		\
+	}						\
+							\
+	void g2_##uart##_setbrg(void)			\
+	{						\
+		g2_serial_init(UART);			\
+	}						\
+							\
+	void g2_##uart##_putc(const char c)		\
+	{						\
+		if (c == '\n')				\
+			g2_serial_putc(UART, '\r');	\
+		g2_serial_putc(UART, c);		\
+	}						\
+							\
+	int g2_##uart##_getc(void)			\
+	{						\
+		return g2_serial_getc(UART);		\
+	}						\
+							\
+	int g2_##uart##_tstc(void)			\
+	{						\
+		return g2_serial_tstc(UART);		\
+	}						\
+	
+
+#define g2_uart_desc(uart)				\
+struct serial_device g2_##uart##_dev = {		\
+	.name	= "g2_"#uart,				\
+	.start	= g2_##uart##_init,			\
+	.stop	= NULL,					\
+	.setbrg	= g2_##uart##_setbrg,			\
+	.putc	= g2_##uart##_putc,			\
+	.puts	= g2_serial_puts,			\
+	.getc	= g2_##uart##_getc,			\
+	.tstc	= g2_##uart##_tstc,			\
+};
+
+#define g2_serial_multi(uart, UART)			\
+	g2_uart(uart, UART)				\
+	g2_uart_desc(uart)				\
+
+
+#ifdef CONFIG_SYS_SERIAL0
+	g2_serial_multi(serial0, CONFIG_SYS_SERIAL0)
+#endif
+#ifdef CONFIG_SYS_SERIAL1
+	g2_serial_multi(serial1, CONFIG_SYS_SERIAL1)
+#endif
+
+void g2_serial_initialize(void)
+{
+	serial_register(&g2_serial0_dev);
+	serial_register(&g2_serial1_dev);
+}
+
+__weak struct serial_device *default_serial_console(void)
+{
+	return &g2_serial0_dev;
+}
diff --git a/drivers/serial/serial_g2.h b/drivers/serial/serial_g2.h
new file mode 100644
index 0000000..8d2c638
--- /dev/null
+++ b/drivers/serial/serial_g2.h
@@ -0,0 +1,99 @@
+/*
+ *  drivers/serial/serial_g2.h
+ *
+ * Copyright (c) Cortina-Systems Limited 2010.  All rights reserved.
+ *                Jason Li <jason.li@cortina-systems.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+/*
+ * Cortina UART Module
+ */
+#define GOLDENGATE_UART0_BASE		0xf0070110
+#define GOLDENGATE_UART1_BASE		0xf0070140
+#define UART_CLOCK					50000000		// 50MHz
+#define CONFIG_BAUDRATE				115200
+/*
+ * Cortina UART Module
+ */
+#define UART0_BASE_ADDR         GOLDENGATE_UART0_BASE
+#define UART1_BASE_ADDR         GOLDENGATE_UART1_BASE
+#define CONFIG_SYS_SERIAL0      GOLDENGATE_UART0_BASE
+#define CONFIG_SYS_SERIAL1      GOLDENGATE_UART1_BASE
+
+#define CONFIG_CONS_INDEX		0
+
+/* Register definitions */
+#define UCFG					0x00		/* UART config register */
+#define UFC						0x04		/* Flow Control */
+#define URX_SAMPLE 				0x08		/* UART RX Sample register */
+#define URT_TUNE				0x0C		/* Fine tune of UART clk */
+#define UTX_DATA 				0x10		/* UART TX Character data */
+#define URX_DATA 				0x14		/* UART RX Character data */
+#define UINFO					0x18		/* UART Info */
+#define UINT_EN0 				0x1C		/* UART Interrupt enable 0*/
+#define UINT_EN1 				0x20		/* UART Interrupt enable 1*/
+#define UINT0					0x24		/* UART Interrupt 0 setting/clearing */
+#define UINT1					0x28		/* UART Interrupt 1 setting/clearing */
+#define UINT_STAT				0x2C		/* UART Interrupt Status */
+/* UART Control Register Bit Fields.*/
+#define UCFG_BAUD_COUNT			(1<<8)
+#define UCFG_EN					(1<<7)
+#define UCFG_RX_EN				(1<<6)
+#define UCFG_TX_EN				(1<<5)
+#define UCFG_PARITY_EN			(1<<4)
+#define UCFG_PARITY_SEL			(1<<3)
+#define UCFG_2STOP_BIT			(1<<2)
+#define UCFG_CNT1				(1<<1)
+#define UCFG_CNT0				(1<<0)
+#define UCFG_CHAR_5				0
+#define UCFG_CHAR_6				1
+#define UCFG_CHAR_7				2
+#define UCFG_CHAR_8				3
+
+#define  UINFO_TX_FIFO_EMPTY	(1<<3)
+#define  UINFO_TX_FIFO_FULL		(1<<2)
+#define  UINFO_RX_FIFO_EMPTY	(1<<1)
+#define  UINFO_RX_FIFO_FULL		(1<<0)
+
+#define UINT_RX_NON_EMPTY		(1<<6)
+#define UINT_TX_EMPTY			(1<<5)
+#define UINT_RX_UNDERRUN 		(1<<4)
+#define UINT_RX_OVERRUN			(1<<3)
+#define UINT_RX_PARITY_ERR		(1<<2)
+#define UINT_RX_STOP_ERR		(1<<1)
+#define UINT_TX_OVERRUN			(1<<0)
+#define UINT_MASK_ALL			0x7F
+
+// UART CONF bits
+#define SHF_UCONF_WL       0
+#define MSK_UCONF_WL       (0x3<<SHF_UCONF_WL)
+#define VAL_UCONF_WL_5     (0x0<<SHF_UCONF_WL)
+#define VAL_UCONF_WL_6     (0x1<<SHF_UCONF_WL)
+#define VAL_UCONF_WL_7     (0x2<<SHF_UCONF_WL)
+#define VAL_UCONF_WL_8     (0x3<<SHF_UCONF_WL)
+
+#define SHF_UCONF_SB       2
+#define MSK_UCONF_SB       (0x1<<SHF_UCONF_SB)
+#define VAL_UCONF_SB_1     (0x0<<SHF_UCONF_SB)
+#define VAL_UCONF_SB_2     (0x1<<SHF_UCONF_SB)
+
+#define SHF_UCONF_PM       3
+#define MSK_UCONF_PM       (0x3<<SHF_UCONF_PM)
+#define VAL_UCONF_PM_N     (0x0<<SHF_UCONF_PM)
+#define VAL_UCONF_PM_O     (0x2<<SHF_UCONF_PM)
+#define VAL_UCONF_PM_E     (0x3<<SHF_UCONF_PM)
-- 
2.5.0

